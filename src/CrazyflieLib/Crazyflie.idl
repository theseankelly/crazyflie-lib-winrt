namespace bitcraze.crazyflielib
{
    enum CrazyflieStatus
    {
        Success                   = 0,
        Failure                   = 1,
        DeviceUnreachable         = 2,
        InvalidDeviceId           = 3,
        BthServiceNotFound        = 4,
        BthCharacteristicNotFound = 5,
        BthDeviceDescriptorError  = 6,
    };

    // Goal: design how to interact with this class and the various CRTP blocks.
    //
    // Simple approach: Big list of functions. This is not partitioned out nicely.
    //
    // Class for each port (Commander, etc)
    //  - what does creating these objects look like?
    //  - I would want to still do what we do, but have Crazyflie.Commander.SendPacket(), etc
    //      - It doesn't make sense to expose this as a proper class, because we don't want to encourage instantiation
    //      - Subclass with private ctor?

    [default_interface]
    runtimeclass Crazyflie
    {
        //
        // Summary:
        //      Creates an instance of a Crazyflie with the given deviceId.
        //      Device ID can be retrieved with ScanInterfacesAsync.
        Crazyflie(String deviceId);

        //
        // Summary:
        //      Initializes connection to the Crazyflie asynchronously.
        Windows.Foundation.IAsyncOperation<CrazyflieStatus>
        InitializeAsync();

        //
        // Summary:
        //      Sends a legacy RPYT setpoint to the Crazyflie.
        Windows.Foundation.IAsyncOperation<CrazyflieStatus>
        SendCommanderPacketAsync(
            Single roll,
            Single pitch,
            Single yaw,
            Single thrust);

        //
        // Summary:
        //      Sends a hover setpoint to the Crazyflie.
        Windows.Foundation.IAsyncOperation<CrazyflieStatus>
        SendCommanderHoverPacketAsync(
            Single vx,
            Single vy,
            Single yawrate,
            Single zdist);

        //
        // Summary:
        //      Sends a stop setpoint to the Crazyflie.
        Windows.Foundation.IAsyncOperation<CrazyflieStatus>
        SendCommanderStopPacketAsync();

        Windows.Foundation.IAsyncOperation<CrazyflieStatus>
        ReadPacketAsync();

        //
        // Summary:
        //      Asynchronously searches for Crazyflie devices across all
        //      available interfaces.
        static Windows.Foundation.IAsyncOperation<
            Windows.Foundation.Collections.IVector<String> >
            ScanInterfacesAsync();
    };
}
